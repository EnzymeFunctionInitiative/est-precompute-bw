#!/usr/bin/env perl
use strict;
use POSIX;
my %settings;
use File::Basename;
my $dirname = dirname(__FILE__);
use Getopt::Long;
my $module;
my $family;
  GetOptions ("module=s" => \$module,    # numeric
              "family=s"   => \$family)      # string
  or die("Error in command line arguments\n");

my $usage = "\t -module</mnt/a/u/sciteam/sadkhin/modules/est-precompute/50> -family<pfam,gene3d,interpro>\n";
die $usage unless defined $module && defined $family;

my @bins = split "\n", `ls $dirname/lists/$family/blast/`;

#Here is where the magic happens!
#So this may change from release to release, but these are general rules
#Doing it this way is good, because less jobs will be killed if something goes wrong
my %limits;
$limits{20000}{'cpu'} = 32;
$limits{20000}{'nodes'} = 20;

$limits{30000}{'cpu'} = 16;
$limits{30000}{'nodes'} = 30;

$limits{90000}{'cpu'} = 9;
$limits{90000}{'nodes'} = 40;

$limits{150000}{'cpu'} = 12; #16 Run 1  #12 Run 2
$limits{150000}{'nodes'} = 60;

$limits{200000}{'cpu'} = 12; #16 Run 1 #12 Run 2
$limits{200000}{'nodes'} = 70;

#Assign a bin its limits
foreach my $bin( sort {$a <=> $b} @bins){
	my $limit_assigned = 0;
	foreach my $limit(sort {$a <=> $b} keys %limits){
		if($bin < $limit){
			$settings{$bin}{'cpu'} = $limits{$limit}{'cpu'};
			$settings{$bin}{'nodes'} = $limits{$limit}{'nodes'};
			$limit_assigned = 1;
			last;
		}
	}
	#Unknown limits! Maybe make this the final limit that we already have
	if(! $limit_assigned){
		$settings{$bin}{'cpu'} = 4;
		$settings{$bin}{'nodes'} = 100;
	}

};

#Create blast qsubs
foreach my $bins(sort {$a <=> $b} keys %settings){
	my $output_dir = "$dirname/qsub/$family/blast";
	mkdir($output_dir);
	my $qsub_file = "$output_dir/$bins.autogenerated.qsub";
	print "Printing $bins to $qsub_file\n";
	open O, ">$qsub_file" or die $!;
	my $cpu = $settings{$bins}{'cpu'};
	my $nodes = $settings{$bins}{'nodes'};
	my $n = $cpu * $nodes;
	my $d=floor(32/$cpu);
	my $qsub = "" .

"#!/bin/sh
#PBS -j oe
#PBS -l nodes=$nodes:ppn=32:xe
#PBS -l walltime=24:00:00
#PBS -q normal
#PBS -N $family-blast-$bins
#PBS -M sadkhin2\@illinois.edu

time=`date +%T`
source /opt/modules/default/init/bash
module load $module
cd \$PBS_O_WORKDIR
scheduler=\$SCHEDULER_X

echo '$family-blast-$bins' > \$PBS_JOBID 

work_file=\$EST_PRECOMPUTE_SCRIPTS/lists/$family/blast/$bins
directories=\$EST_PRECOMPUTE_SCRIPTS/lists/$family/scheduler.x/$bins
script=\$EST_PRECOMPUTE_SCRIPTS/4-blast_a_family.pl 

#Copy to tmp on each nodes
aprun -n $nodes -N 1 -d 32 \$EST_PRECOMPUTE_SCRIPTS/copy_blast_databases.pl \$directories 
aprun -n $n -N $cpu -d $d    \$scheduler \$work_file \$script > $bins.log


";
	print O "$qsub" or die $!;
	close O;

	#Create blast check!
	$qsub_file = "$qsub_file.check";
	print "Printing $bins.check to $qsub_file\n";
	open O, ">$qsub_file" or die $!;

my $qsub = "".
"#!/bin/sh
#PBS -j oe
#PBS -l nodes=1:ppn=32:xe
#PBS -l walltime=24:00:00
#PBS -q normal
#PBS -N check-$family-$bins	
source /opt/modules/default/init/bash
module load $module
cd \$PBS_O_WORKDIR
work_file=\$EST_PRECOMPUTE_SCRIPTS/lists/$family/blast/$bins
script=\$EST_PRECOMPUTE_SCRIPTS/4-check_blast.pl 
\$script $bins
";
	print O $qsub;
}


